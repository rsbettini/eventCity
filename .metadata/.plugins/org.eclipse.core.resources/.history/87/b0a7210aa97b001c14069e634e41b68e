package com.devsuperior.bds02.services;

import java.awt.print.Pageable;
import java.util.List;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import javax.persistence.EntityNotFoundException;
import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;

import com.devsuperior.bds02.dto.EventDTO;
import com.devsuperior.bds02.entities.Event;
import com.devsuperior.bds02.repositories.EventRepository;
import com.devsuperior.bds02.services.exceptions.ResourceNotFoundException;

@Service
public class EventService {
	
	@Autowired
	private EventRepository repository;
	
	//opção 01 
	/*@Transactional
	public Page<EventDTO> findAllPaged(Pageable pageable){
		Page<Event> page = repository.findById(null)
		return page.map(x -> new EventDTO(x));
	}*/
	
	
	//opção 02
	@Transactional
	public List<EventDTO> findAll(){
		List<Event> list = repository.findAll();
		return list.stream().map(x -> new EventDTO(x)).collect(Collectors.toList());}
	
	@Transactional
	public EventDTO EventDTO(Long id, EventDTO dto) {
		
		try{
			Event entity = repository.getOne(id);
			copyDtoToEntity(dto, entity);
			entity = repository.save(entity);
			return new EventDTO(entity);
		}
		catch (EntityNotFoundException e) {
			throw new ResourceNotFoundException("ID not found " + id);
		}
	}
	
	private void copyDtoToEntity(EventDTO dto, Event entity) {
		entity.setName(dto.getName());
		entity.setDate(dto.getDate());
		entity.setUrl(dto.getUrl());
	}
	
	@Transactional
	public EventDTO update(Long id, EventDTO dto) {
		
		try{
			Event entity = repository.getOne(id);
			copyDtoToEntity(dto, entity);
			entity = repository.save(entity);
			return new EventDTO(entity);
		}
		catch (EntityNotFoundException e) {
			throw new ResourceNotFoundException("ID not found" + id);
		}
		/*catch(DataIntegrityViolationException e) {
			throw new DatabaseException("Integrity violation");
		}*/
	}
}
